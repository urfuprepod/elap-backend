generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubsectionContentStatus {
  text
  audio
  video
  image
}

model Video {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  title              String   @unique
  videoUrl           String   @map("video_url")
  videoDuration      String   @map("video_duration")
  videoPreviewImgUrl String   @map("video_preview_img_url")

  @@map("videos")
}

model User {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  email           String                @unique
  login           String
  isActive        Boolean               @default(false) @map("is_active")
  mentorRole      String?               @map("mentor_role")
  mentorId        Int?                  @map("mentor_id")
  password        String
  isSuperAdmin    Boolean               @default(false) @map("is_super_admin")
  roleId          Int                   @map("role_id")
  messageMentor   Message[]             @relation("MentorMessages")
  messageStudent  Message[]             @relation("StudentMessages")
  passwordRequest ResetPasswordRequest?
  tasks           Task[]                @relation("TaskStudent")
  mentoredTasks   Task[]                @relation("TaskMentor")
  mentor          User?                 @relation("MentorStudent", fields: [mentorId], references: [id])
  students        User[]                @relation("MentorStudent")
  role            Role                  @relation(fields: [roleId], references: [id])

  @@map("users")
}

model FAQ {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  question  String
  answer    String

  @@map("faq")
}

model Task {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  type          String
  userId        Int       @map("user_id")
  files         String[]
  status        String
  responseText  String?   @map("response_text")
  responseFiles String[]  @map("response_files")
  comments      Comment[]
  user          User      @relation("TaskStudent", fields: [userId], references: [id], onDelete: Cascade)
  mentorId      Int       @map("mentor_id")
  mentor        User?     @relation("TaskMentor", fields: [mentorId], references: [id], onDelete: Cascade)
  text          String

  @@map("tasks")
}

model Comment {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  taskId             Int?     @map("task_id")
  maintainerUserType String   @map("maintainer_user_type")
  message            String
  Task               Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  files              String[]

  @@map("comments")
}

model Section {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  text        String
  subsections Subsection[]

  @@map("sections")
}

model Subsection {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  text                String
  sectionId           Int?                @map("section_id")
  section             Section?            @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subsections_content SubsectionContent[]

  @@map("subsections")
}

model SubsectionContent {
  id            Int                     @id @default(autoincrement())
  data          Json
  subsection_id Int
  subsection    Subsection              @relation(fields: [subsection_id], references: [id])
  type          SubsectionContentStatus

  @@map("subsections_content")
}

model Advertisement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String
  text      String
  files     String[]

  @@map("advertisements")
}

model Message {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  mentorId      Int?     @map("mentor_id")
  studentId     Int      @map("student_id")
  theme         String
  question      String
  response      String
  questionFiles String[] @map("question_files")
  responseFiles String[] @map("response_files")
  status        String
  mentor        User?    @relation("MentorMessages", fields: [mentorId], references: [id])
  student       User     @relation("StudentMessages", fields: [studentId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Role {
  id    Int    @id @default(autoincrement())
  title String
  user  User[]

  @@map("roles")
}

model ResetPasswordRequest {
  id       Int     @id @default(autoincrement())
  isActive Boolean @default(true) @map("is_active")
  userId   Int     @unique @map("user_id")
  user     User    @relation(fields: [userId], references: [id])

  @@map("reset_password_request")
}
